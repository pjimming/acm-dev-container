{
	// Place your algorithm 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "Fenwick Tree" : {
        "scope": "cpp",
        "prefix": "fenwick",
        "description": "Fenwick Tree",
        "body": [
            "template <typename T>",
            "struct Fenwick {",
            "    int n;",
            "    std::vector<T> a;",
            "",
            "    Fenwick(int n = 0) {",
            "        init(n);",
            "    }",
            "",
            "    void init(int n) {",
            "        this->n = n;",
            "        a.assign(n, T());",
            "    }",
            "",
            "    void add(int x, T v) {",
            "        for (int i = x + 1; i <= n; i += i & -i) {",
            "            a[i - 1] += v;",
            "        }",
            "    }",
            "",
            "    T sum(int x) {",
            "        auto ans = T();",
            "        for (int i = x; i > 0; i -= i & -i) {",
            "            ans += a[i - 1];",
            "        }",
            "        return ans;",
            "    }",
            "",
            "    T rangeSum(int l, int r) {",
            "        return sum(r) - sum(l);",
            "    }",
            "",
            "    int kth(T k) {",
            "        int x = 0;",
            "        for (int i = 1 << std::__lg(n); i; i /= 2) {",
            "            if (x + i <= n && k >= a[x + i - 1]) {",
            "                x += i;",
            "                k -= a[x - 1];",
            "            }",
            "        }",
            "        return x;",
            "    }",
            "};",
        ]
    },
	"Disjoint Union": {
		"scope": "cpp",
		"prefix": "dsu",
		"body": [
			"struct DSU {",
            "    std::vector<int> f, siz;",
            "    DSU(int n) :",
            "        f(n), siz(n, 1) {",
            "        std::iota(f.begin(), f.end(), 0);",
            "    }",
            "    int leader(int x) {",
            "        while (x != f[x]) x = f[x] = f[f[x]];",
            "        return x;",
            "    }",
            "    bool same(int x, int y) {",
            "        return leader(x) == leader(y);",
            "    }",
            "    bool merge(int x, int y) {",
            "        x = leader(x);",
            "        y = leader(y);",
            "        if (x == y) return false;",
            "        siz[x] += siz[y];",
            "        f[y] = x;",
            "        return true;",
            "    }",
            "    int size(int x) {",
            "        return siz[leader(x)];",
            "    }",
            "};",
		]
	},
    "Algorithm Init Tmpl": {
		"scope": "cpp",
		"prefix": "acm",
		"body": [
			"#include <bits/stdc++.h>",
            "",
            "using i64 = long long;",
            "",
            "void solve() {",
            "    $0",
            "}",
            "",
            "int main() {",
            "    std::ios::sync_with_stdio(0);",
            "    std::cin.tie(0);",
            "    std::cout.tie(0);",
            "",
            "    int T = 1;",
            "    std::cin >> T;",
            "    while (T--) {",
            "        solve();",
            "    }",
            "",
            "    return 0;",
            "}",
		]
	}
}